generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  userId       String   @map("user_id")
  displayName  String?  @map("display_name")
  organization String?
  phone        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Event        Event[]

  @@map("profiles")
  @@unique([userId])
}

model Event {
  id                 String           @id @default(cuid())
  profileId          String           @map("profile_id")
  name               String
  description        String?
  logoUrl            String?
  startDate          DateTime?        @map("start_date")
  endDate            DateTime?        @map("end_date")
  location           String?
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  profile            Profile          @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  Session            Session[]
  SharedPhoto        SharedPhoto[]

  @@map("events")
}

model Session {
  id               String             @id @default(cuid())
  eventId          String             @map("event_id")
  photoUrl         String?            @map("photo_url")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  AIPhoto          AIPhoto[]
  Event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AIPhoto {
  id                String        @id @default(cuid())
  sessionId         String        @map("session_id")
  generatedUrls     String[]      @map("generated_urls")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  session           Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  SharedPhoto       SharedPhoto[]

  @@map("ai_photos")
}

model SharedPhoto {
  id                 String           @id @default(cuid())
  aiPhotoId          String           @map("ai_photo_id")
  eventId            String           @map("event_id")
  selectedUrl        String           @map("selected_url")
  qrCodeUrl          String           @map("qr_code_url")
  sharedAt           DateTime         @default(now()) @map("shared_at")
  qrExpiresAt        DateTime         @map("qr_expires_at")
  createdAt          DateTime         @default(now()) @map("created_at")
  AIPhoto            AIPhoto          @relation(fields: [aiPhotoId], references: [id], onDelete: Cascade)
  Event              Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("shared_photos")
}